#!/usr/bin/env python3

# pip3 install pyyaml requests

from yaml import SafeLoader, load as yaml
from os import makedirs, path, listdir
from shutil import make_archive, unpack_archive
import requests
import hashlib

# get information about current releases
def get_releases(arch="armhf"):
  r = requests.get(f'https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/{arch}/latest-releases.yaml')
  return yaml(r.text, Loader=SafeLoader)

# download a release
def download_release(release, output=None):
  if output == None:
    output = f'out/{release["file"]}'
  r = requests.get(f'https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/{release["arch"]}/{release["file"]}')
  with open(output, "wb") as f:
    f.write(r.content)
  h = hashlib.sha256(r.content).hexdigest()
  if h != release["sha256"]:
    raise Exception("Hash did not match.")

if __name__ == "__main__":
  work_dir="./out"
  makedirs(path.join(work_dir, "nullos"), exist_ok=True)
  
  # get alpine
  if not path.isfile(path.join(work_dir, "alpine.tgz")):
    for r in get_releases():
      if r["flavor"] == "alpine-rpi":
        print(f'Downloading Alpine: {r["title"]}.')
        download_release(r, path.join(work_dir, "alpine.tgz"))
        unpack_archive(path.join(work_dir, "alpine.tgz"), path.join(work_dir, "nullos"))
        break
  
  # build overlay files
  for overlay in listdir('overlays'):
    p = path.join('overlays', overlay)
    if path.isdir(p):
      print(f'Overlay: {overlay}')
      make_archive(path.join(work_dir, "nullos", f'{overlay}.apkvol'), 'gztar', p, '.')

  # rebuild tarball
  print(f'Building: {path.join(work_dir, "nullos")}.tar.gz')
  make_archive(path.join(work_dir, "nullos"), 'gztar', path.join(work_dir, "nullos"), '.')