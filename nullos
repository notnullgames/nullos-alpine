#!/usr/bin/env bash

PYTHON=$(which python3)
SFDISK=$(which sfdisk)

function red {
  printf "\033[0;31m$@\033[0m\n"
}

function green {
  printf "\033[0;32m$@\033[0m\n"
}

function yellow {
  printf "\033[0;33m$@\033[0m\n"
}

if [ -z "${PYTHON}" ];then
  red "python3 not found in your path."
  exit 1
fi

if [ -z "${SFDISK}" ];then
  red "sfdisk not found in your path."
  exit 1
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
WORK_DIR=$(realpath out)
OUT_DISK=""
PROGNAME=$0


function usage {
  echo "$PROGNAME --work-dir <WORKDIR> --disk <DISK>"
  echo "  --work-dir | -w    - The dir where files go, while working on stuff"
  echo "  --disk | -d        - The disk that should be partioned/formatted"
  echo "  --no-format | -n   - Just setup files, no linux partition tools"
  echo "  --help | -h        - Show this help"
  exit 1
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -w|--work-dir)
      WORK_DIR=$(realpath "$2")
      shift # past argument
      shift # past value
    ;;
    -d|--disk)
      OUT_DISK="$2"
      shift # past argument
      shift # past value
    ;;
    -n|--no-format)
      OUT_DISK=""
      NOFORMAT="1"
      shift # past argument
      shift # past value
    ;;
    -h|--help)
      usage
    ;;
    *)
      usage
    ;;
esac
done

# choose disk if not set with CLI
if [ -z "${NOFORMAT}" ];then
  if [ -z "${OUT_DISK}" ];then
    if (whiptail --yesno --title "NullOS" "Do you want to partition/format an SD card?" 0 0);then
      options=()
      while IFS= read -r -d $'\0' device; do
          device=${device/\/dev\//}
          size=$(lsblk -bno SIZE /dev/$device | head -1 | numfmt --to=iec --suffix=B)
          options[${#options[@]}]="${device}"
          options[${#options[@]}]="$(cat "/sys/class/block/${device}/device/model") - ${size}"
      done < <(find "/dev/" -regex '/dev/sd[a-z]\|/dev/vd[a-z]\|/dev/hd[a-z]' -print0)
      CHOICE=$(whiptail --title "NullOS" --menu "What device would you like to partition/format?" 0 0 0 "${options[@]}" 3>&2 2>&1 1>&3)
      if [ ! -z "${CHOICE}" ];then
        OUT_DISK="/dev/${CHOICE}"
      else
        echo "Canceled."
        exit
      fi
    fi
  else
    if [ ! -f "${OUT_DISK}" ];then
      red "${OUT_DISK} does not exist."
      exit 1
    fi
  fi
fi

# setup dirs
rm -rf "${WORK_DIR}/nullos" "${WORK_DIR}/overlay"
sudo umount -f "${WORK_DIR}/disk"
mkdir -p "${WORK_DIR}/nullos"
mkdir -p "${WORK_DIR}/overlay"
mkdir -p "${WORK_DIR}/disk"

# get alpine disk
if [ ! -f "${WORK_DIR}/alpine.tgz" ];then
  green "Downloading Alpine"
  URL=$("${PYTHON}" "${DIR}/get_release.py")
  wget "${URL}" -O "${WORK_DIR}/alpine.tgz"
else
  yellow "Alpine found."
fi

green "Extracting Alpine"
tar xzf "${WORK_DIR}/alpine.tgz" -C "${WORK_DIR}/nullos"

green "Merging overlays"
for overlay in "${DIR}"/overlays/*;do
  rsync -abviuzP "${overlay}/" "${WORK_DIR}/overlay"
  tar czf "${WORK_DIR}/nullos/nullos.apkovl.tar.gz" -C "${WORK_DIR}/overlay/" .
done

green "Compressing overlay nullos.apkovl.tar.gz"
tar czf "${WORK_DIR}/nullos/nullos.apkovl.tar.gz" --strip-components=1 -C "${WORK_DIR}/overlay" $(ls -A "${WORK_DIR}/overlay")

# copy local (non-checked in) files to SD root
if [ -d "${DIR}/local" ];then
  sudo rsync -r "${DIR}/local/" "${WORK_DIR}/nullos"
fi

if [ -z "${OUT_DISK}" ];then
  yellow "Complete. Copy the files in ${WORK_DIR}/nullos/ to your disk."
else
  green "Partitioning disk ${OUT_DISK}"
  sudo umount -f /dev/sdg*
  echo ',,c,*' | sudo "${SFDISK}" --wipe auto "${OUT_DISK}"
  green "Formatting disk ${OUT_DISK}"
  sudo mkfs.vfat "${OUT_DISK}1"
  green "Copying files to ${OUT_DISK}"
  sudo mount "${OUT_DISK}1" "${WORK_DIR}/disk"
  sudo rsync -r "${WORK_DIR}/nullos/" "${WORK_DIR}/disk"
  sudo umount -f "${WORK_DIR}/disk"
fi